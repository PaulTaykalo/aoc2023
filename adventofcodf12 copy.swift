import Foundation

// Set buffet to immediately flush output
setbuf(stdout, nil)

let inputTest = """
#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.
"""

let input3 = """
......##....#
.#.#.##...#.#
.##.#..#..#.#
.##.#..#..#.#
.#.#.##...#.#
......##..#.#
....#.#....#.
...#.###...##
.#.##.#.###..
###.....##.##
#.##..##...#.
###.#..##.##.
#..#######..#
#..#######..#
###.#..##.##.
"""


let input = """
######....#######
..#...####...#..#
.###.#....#.###.#
....##.##.##....#
.##....##....##..
.####...#..####.#
##..#..##..#..###
..#.########.#...
#..#.######.#..#.
.##..#.##.#..##..
###.#.####.#.###.
###.#.####.#.###.
.##..#.##.#..##..
#..#.######.#..#.
..#.########.#...

......##....#
.#.#.##...#.#
.##.#..#..#.#
.##.#..#..#.#
.#.#.##...#.#
......##..#.#
....#.#....#.
...#.###...##
.#.##.#.###..
###.....##.##
#.##..##...#.
###.#..##.##.
#..#######..#
#..#######..#
###.#..##.##.

#.#.#.#..
#.#.#.##.
#.#.#.##.
#.#.#.#..
...#.....
#..#.##..
....#...#
####....#
#####....
.###.#.##
####...##
.#.#...#.
#....#.#.

.########..##
.###..###.#.#
###....###.##
#...##...##.#
.########.#..
#...##..#####
#.##..##.#...
....##....#..
....##....#..

.........##..#..#
.#....#.######.##
.#....#.######.##
.........##.....#
.######.#..#.#..#
##.##.###.##..#.#
#########...#..#.
###..###...#.####
#......#....#..#.
##....##.....###.
..####..##.#....#
.............#.#.
..#..#...####....

##......##.
....##.....
##..##..##.
..#.##.#...
..........#
..##..##...
####..####.
####..####.
#.##..##.#.

......#..######
######.#.......
.####.###..##..
..##..##.#....#
.####.#...#..#.
..##..#.##....#
#.##.##..#....#
##..####.......
.####..#.######
##..##..#.....#
......####.##.#
#....#.........
######..##....#
######....#..#.
#....#####....#

##...........
..###########
##..###..###.
##.##########
..#..........
##...#....#..
..###..##..##
##.##.#..#.##
..#.###.####.
###.###..###.
....#..##..#.
##.#.#....#.#
...####..####
....#.####.#.
##.##......##

#.#....##..
#..##...#.#
#.###..##.#
#.###..##.#
#..##...#.#
#.#....##..
.#..####.#.
..#..######
#..###.#.#.
.#.########
.#.########
#..###.#.#.
..#...#####

....###.#.##..#
....###.#.##..#
#.##..####.....
#.##.....##..##
.#..##....#.##.
.#......##.#.#.
....#.#...###.#
....#.#...###.#
.#......##.#.#.
.#..##....#.##.
#.##......#..##
#.##..####.....
....###.#.##..#

#..#..#..##..
#.##.........
#.##.........
...#..#..##..
##..#.#.###..
#.#.#########
...#.##....##

..########..#.###
....####....#.#..
........#...###..
..##....##...##..
####....####.#.##
###..##..###.#.##
#....##....###.##
###......####.#..
#.##.##.##.##..##

.####.##.
......##.
..##.....
..##..##.
#....#..#
##..##..#
#....###.
##..##..#
##..#####

####..#######
.##....##..##
..######....#
..##..##....#
#...##...##..
#.#....#.##.#
#.######.##.#
###....######
###.##.######
.#..##..#..#.
##....#.####.

###.#.#..#.#.##
##..##....##..#
..#.########.#.
##.#..#..#..#.#
###..##..##..##
##.#.#....#.#.#
..#.#......#.#.
####.######.###
##.##.#..#.####
..##.#....#.##.
..#.##.##.##.#.
..#.#.#..#.#.#.
###.########.##
###.#......#.##
##...#.##.#...#

#......
##..###
##..##.
#..#...
..##...
###.#..
.##.###
..#....
#....##
#....##
..#....

.#####....##.#...
..####....##.#...
##.#.####..#.###.
##...##...#..#.#.
##...##...#..#.#.
##.#.####..#.###.
..####....##.#...
.#####....##.#...
.#..##......###..
#.#####...###.##.
....#..#.#..#####
..###....##......
.#...###...#.##.#
#...#.....#..##.#
#..##.###.#..#.#.
.#...#....###.#..
##..#..###......#

###.##.##
##.####.#
##.#..#.#
####..###
....##...
##.#..#.#
...#..#..
##..###.#
##......#
##......#
..#.##.#.
...#..#..
##.####.#
....##...
...####..
....##...
##.####.#

###..##.#
#####....
.##.#.##.
#.#.###..
##...#..#
#.#.##.#.
#####.##.
###.#....
###.#.#..
###.#.#..
###.#....

..#...#
..#...#
.....#.
#.#.#.#
.###.#.
###.#..
##....#
#.#.#.#
###..#.
.###..#
.###..#
###..#.
###.#.#
##....#
###.#..
.###.#.
#.#.#.#

.###.....
...###..#
....##.#.
#.#..###.
#.#..###.
....##...
...###..#
.###.....
.###.....
...###..#
....##...

########...##.#
########.#.#...
##.##.####.####
########.##...#
#......##..####
##....##.###..#
##.##.##.##..##
##....###..####
###..#####..##.
..####...#####.
..####...#####.
..####......#.#
#########.##..#
..........##.#.
..#..#...###..#

###.#.###....
####...##..#.
..#..##...##.
..##.#######.
###.#.####..#
##.....####..
...####..#..#
..###.#.#.##.
##....###...#
..##..##.####
###.##.####.#
..####.....##
...#.#..#.#..
...#.#....#..
..####.....##

#..#...
.##...#
.##..#.
.##..##
.##.#.#
.##.#.#
.##..##
.##..#.
.##....
#..#...
....#.#
.##....
####.##
####.#.
....###

#.#..#.#.#.....#.
...##...#.#.#.#.#
.######.#.......#
..#.##..#..###.##
###..####.##.#..#
#......######....
############.#.##
.#.##.#...#.#####
.#.##.#.##..#.#..
.........#.#.#.##
........#.#.#..##
###..####.##.#..#
.##..##..#.###..#
.##..##..#.###..#
###..####.##.#..#
........#.#.#..##
.........#.#.#.##

###.####.######
....#.......##.
.#..####..#.##.
#.##.##.##.####
.#..#..#..#....
..#..##..#..##.
#...####...#..#

....###
#...#.#
.######
..#####
....#..
.###.##
.##.#..
..#....
....#..
..#####
.#...##
#...###
#...###
.#...##
..#####

####.###..###.#
#.##.########.#
....##......##.
...##..#.##..##
....##.#..#.##.
##..#.#....#.#.
......##..##...
#..##........##
..#...#....#...
.##...#.##.#...
.##...#.##.#...
..#...#....#...
#..##........##

.###.#.....
.##.##.####
.####..#.##
#.##..#.##.
.#####.....
..##...####
...#..#.##.
...#..#....
...#..#....
...#..#.##.
..##...####

.....#..#..
...###..##.
#####.#.#.#
.##..#.#.##
#..#..#.#.#
#..######.#
....##..##.
....##..##.
#..######.#

##.###.##.#
.##.#####..
.#..#.##.##
.#..#.#..##
.##.#####..
##.###.##.#
.#....#.###
.#....#.###
##.###.##.#
.##.#####..
.#..#.#..##
.#..#.##.##
.##.#####..
##.###.##.#
#..#..#.#.#

###..###.#.##
.##..###.#.##
..###.#.#..#.
.#......####.
#...#...###..
.#.#####.##.#
.#.#####.##.#
#...#...###..
.#......####.

.##.##...##...##.
#####..##..##..##
.....##..##..##..
.##.#.#.####.#.#.
.##...#.#..#.#...
....#..........#.
#..#..#......#..#
....###.....####.
.##...#.#..#.#...
.....#..####..#..
#..#...##..##...#
....#...#..#...#.
#..#.##########.#
#..##...####...##
#####.##.##.##.##

...##...#######
.##..#..##.....
.#....#....#..#
.##..##.....##.
###..####.#....
##.##.##.###..#
########.###..#
.#....#.###....
#.#..#.##..#..#
..........##..#
########.##.##.

..##.....
...###..#
#...##..#
.###.####
##...####
##.......
...##.##.
#..#..##.
...#.....
...#.....
#..#..##.
...##.##.
##.......
##...####
.###.####
#.#.##..#
...###..#

.#..##..#.##...
..#.##.#..#####
.##.##..#..#.#.
.########.###.#
..#....#..#.##.
##..##..###....
##..##..###....
..#....#..#.##.
.########.###.#

#####..###.#.##
###....##.#..##
##....####.....
...#.#..##.#.#.
..#.#..#.#.....
...#..###..#..#
..##..###..#..#
..#.#..#.#.....
...#.#..##.#.#.
##....####.....
###....##.#..##
#####..###.#.##
..###...#....#.
##.#...#..##...
###.#...##.#.#.
..###.#....#.#.
..#####...###.#

..##.####..#..#
..#.###..##.##.
##.#..##.###..#
##.#.#.####....
###..#.#.##....
####.#.##.##..#
##.##....###..#
###########....
..#.##..####..#
...##..#.#.#..#
....####.######
..#...#.#.#.##.
###...##..##..#
##.#...#.#.#..#
##.#.#.....####
..##..###.##..#
##.#.#....####.

#..#..##...
#..#..##...
.#..#.#...#
#...##..###
###.###.###
##...##.###
..##...##..
##....#.#..
#.#...###..
###.#...#..
......##...

#....###.
#....###.
.#..#.###
#....##..
.......#.
#.#..###.
#.##.#.#.
.......#.
.####.##.
##..##.##
.####.#.#

....#.#####
..#.#......
###.##..##.
..#.#......
.....#.#..#
.#...#.##.#
..###......
#..#####..#
#.##...####
##.###..##.
.#.##..#..#
..####.#..#
#......####
##....#....
#####..####
#####..####
##....#....

....#........
#..#.#.#...#.
....#.......#
.##..#.##....
....##...####
#..#.##..###.
####.##....#.
####.#.#..##.
......#....##
....###..##.#
.##..#.#....#
.##..#.##...#
....###..##.#
......#....##
####.#.#..##.

....###
.#.####
..####.
##.#.##
##.#.##
..####.
.#.####
....###
###...#
###...#
.....##

.#...###...
..#.#######
#..#.##.###
....##.....
..#.##..###
...#.##.###
.#.##.#....
.##.#..##..
#.####...##
#.##.......
#.##...#...
#.####...##
.##.#..##..
.#.##.#....
...#.##.###

.#..#.###
#....#...
######...
#....##..
.########
######...
##..#####
.#..#.#..
.......##

##....#.##..##.
#...#####.####.
.#.##.#....#..#
#.....#####....
.#...#....####.
#.#..#...#..#.#
#.#..#...#..#.#
.#...#....####.
#.....#####....
.#.##.#....#..#
##..#####.####.
##....#.##..##.
.##...#..#...##
#.######..##.##
........#####..
........#####..
#.######..##.##

.#..#.#...##.#.
..#..#....#.###
#.#.#..#.#.##..
#....##....####
#.###.#.##.##.#
##..#...###...#
##..#...###...#
#.###.#.##.##.#
#....#.....####
#.#.#..#.#.##..
..#..#....#.###
.#..#.#...##.#.
.#....##.####..
#.#.#####.#...#
#.#.#####.#...#

.#.####.####.##
.#.#.#........#
###.#...#..#...
###.#...#..#...
.#.#.#........#
.#.####.####.##
..##..##.##.#..

#..####.#.##...##
.....###.#####..#
......##.#..##.##
....#.#.#.##.#..#
....#.#.#.##.#..#
......##.#..##.##
.....###.#####..#
#..##.#.#.##...##
#..####.#.#.####.
.##.####.#.#...#.
.##.###...##..##.
####.#.#...#.#..#
####.#.###.#..###
#..#####....##.#.
#..#####.#..##..#

#.####.####
##....##..#
#......####
.#.##.#....
..####..##.
..####..##.
.#.##.#....
.#.##.##..#
.##..##.##.
..####.....
#.####.#..#

..#.#..#.###....#
.#.######.##...##
#.#.###..##..###.
.#...#####.#..#..
#.##.#.#..#.#..##
#.##.#.#..#.#..##
.#...###.#.#..#..
#.#.###..##..###.
.#.######.##...##
..#.#..#.###....#
..#.#..#.###....#

....#.##...
.#.#..#..##
.#.#..#..##
....#.###..
.......#.##
..##.#...##
...#.#.....
####..#...#
#..#.#...#.
#..#.#...#.
####..#...#
...#.#.....
..##.#...##

..######...
..#.##.#..#
#.##..##.##
#.##..##.#.
..#.##.#..#
..######...
##..##..##.
.#..##..#..
.#..##..#.#
###....####
..#.##.#...

#......####..
..#..#......#
.##..##.##.##
.#.##.#....#.
..#..#..##..#
#..##..####..
##.##.######.
########..###
#..##..##.#..
.##..##....##
.##..##....##
.######....##
...##...##...

.####..##
..#######
.#......#
##..#.#..
####..#..
..#....#.
..#....#.
####..#..
##..#.#..
.#......#
..#######
.####.###
#..#.##..
#..#.##..
.####.###

#.#..#..#......
##...####..#.##
####..#.#..#.##
.##..###.#.#..#
..#.##.####....
.#..##..##.##..
##.###.##.#.###
#..#.#..#.##.##
##..#####....##
####..#.####..#
#.....#.####.##
......###....##
..#...###....##
.##.##.###..###
.##.##.###..###
..#...###....##
......###....##

####..#..
.....##.#
...###...
.....#.##
....##.#.
##.#.#.##
##.#.#.##
....##.#.
.....#.##
...###..#
.....##.#

######...###...
#.##.#.##....##
......##..###.#
#....##....#.#.
.......##...#.#
#######.#...#.#
#######.#...#.#
.......##...#.#
#....##....###.
......##..###.#
#.##.#.##....##
######...###...
.####.##..####.
#.##.#..###....
..##.....##.#.#

#.######.##.#.#
#..####..#.###.
..........#.#..
..#.##.#.......
..#.##.#.......
..........#.##.
#..####..#.###.
#.######.##.#.#
###....#######.
...#..#.....#.#
.#..##..#.###.#
.##.##.##.#..##
.#.####.#...##.

##.#..#..##..#..#
##.#..##....##..#
#.#....#.##.#....
....##.##..##.##.
###.##..#..#..##.
.#####...##...###
...#####.##.#####

###..####..
##...#.....
##...#.....
###..####..
#.#......##
.##....#.##
.###.#....#
#..##....##
.##......##

........#..##
........#.###
........#..#.
#######.#..#.
.#..#...####.
##..###.###.#
#.##.#....###
########.....
#....##.....#
##..###..###.
.#..#.#.####.
......####..#
..##..##.#...

....#.#..##.#.#.#
....#.#..##.#.#.#
..#####.##...#.#.
###..#..##....#.#
###.#....#...####
#..#..#.#...###..
#....###.#.######
..#..##.#..#..##.
..#..##.#..#..##.
#....#.#.#.######
#..#..#.#...###..
###.#....#...####
###..#..##....#.#
..#####.##...#.#.
....#.#..##.#.#.#

...#.##...###
...#.##...###
...##.###..##
.##..#.##...#
#..#..#.#..##
.#....##.#.##
..#.#.###..#.
..#.#.###..#.
.#....##.#.##
#..#..#.#..##
.##....##...#
...##.###..##
...#.##...###

###.######.
##.#.####.#
..#.#.##.#.
..#.#.##.#.
...#.#..#.#
..##.#..#.#
##...####..
..###....##
###.#.##.#.
##.#.#..#.#
##.........
####.####.#
###..#..#..
..#......#.
....#....#.

#..###.##..##.#
.##...#......#.
##.###.##..##.#
##.#.##########
###.##.######.#
#.#...#......#.
..#..#........#
..#..#........#
###...#......#.

..#.####.
..##.##.#
###.#..#.
#.#......
.....##..
.#.######
.########

..#..#..###...##.
#####.#...#..#...
.......#.#.#.##.#
#...#.........##.
.#.##.#.....#....
.#.##.#.....#....
#...#.........##.
.......#.###.##.#
#####.#...#..#...
..#..#..###...##.
#..#..#...#...###
#.#.#.###.#...#..
#.#.#.###.#...#..

....#..#.....
##........###
#....##....#.
##........##.
...#.##.#....
####....####.
.....##......
....#..#.....
..##.##.##...
..##.##.##...
...##..##....
.....##......
####....####.

...........#.
.........#.#.
##.##.##..###
.........##.#
#..##..######
#.#..#.#..#.#
..####..#.#..
..#..#..#.###
#.#..#.#...#.
.##..##....#.
########.#.##

.##......##..##.#
.##......##..#..#
.#...##...#.#....
...#....#...#...#
.#.##..##.#..#.#.
..##.##.##......#
###..##..###..###
.####..####.#.#.#
............##.##

...##....##....
.####.##.####..
.####.##.####..
##..##..##..###
.#.#.#..#...#..
##.#.####.#.###
#..#..##..#..##
#.#........#.##
#...##..##...##
#....#..#....##
...#.#..#.#....
##.###..###.###
####.####.#####

..#...##...#.
#.##.####.##.
##.#..##..#.#
....######...
....##..##...
...#.#..#.#..
##.#.####.#.#
..###.##.###.
###.#.##.#.##
..#..####..#.
....#.##.#...

#......##..##..
#.####.#.######
...##....##..##
...##...#.#..#.
##....##.##..##
..#..#.###.##.#
#.####.#.#....#
##....##.##..##
.#....#...#..#.
...##...#.####.
#.#..#.#.#.##.#
..####..#.#..#.
#########.#..#.
...##..........
.##..##....##..
.######..######
###..###.......

#..#......#.#
#####.#..#.##
....###..###.
#..##.####.##
.##..#....#..
#..##.####.##
.##..######..
#..##..##..##
####..#..#..#
.......##....
.....##..##..
######.##.###
.##.########.

######.#.
##..#.#..
##..###.#
##.##.#..
.##...##.
#....####
#....####
.##...##.
##.##.##.
##..###.#
##..#.#..
######.#.
######.#.

.##..####
.###.##.#
.####....
..#.###..
.#..#....
.########
.##.##...
.###..###
.##..####
##.#.....
##.#.....

#..#.#....#......
######.######.##.
####..####...##.#
.##...##.####.#..
.##...##.####.#..
####..####...##.#
######.######.##.
#..#.#....#......
###.#######.....#

#..##.###.#####
#..######.#####
.####.##.#.##.#
..#.##...#.#.##
#..######...#..
#..######...#..
..#.##...#.#.##
.####.##.#.##.#
#..######.#####
#..##.###.#####
####.####.#..#.

.........####.##.
#####.#.#..#.##.#
.##.##...#...#.#.
#..#...#.#.....#.
#..#...#.#.....#.
.##.##...#.#.#.#.
#####.#.#..#.##.#

.##..######
#####.####.
#..##.#..#.
.###.######
.##.##....#
#####......
.##.#......
.##........
####...##..
####.......
#..##..##..
.##..######
####.##..##
......#..#.
.##.#.####.
....#######
#####.#..#.

#.##.#..##..#.#
.#..#..####..#.
.#..###....###.
#######....####
.####.##..##.##
.#..#........#.
##..####..####.
#.##.###..###.#
#.##.##.##.##.#
.#..#..####..#.
.####..####..##
.#..#.######.#.
......#.##.#...
##..##.#..#.##.
.####.##..##.##

###.####..#
##.#......#
...#..#...#
...#..#...#
##.#......#
##..####..#
##.#.#.#..#
..###.###.#
####.#.###.
##..#.#.###
...#....#..

.###..##..###
..#.##..###..
##..#.#####..
##..#.#####..
..#.###.###..
.###..##..###
..###....#.#.
...###..##..#
..#..#..#..#.
.##..##.....#
.##..##.....#

...#.#..#
###..##..
...#.##..
##......#
##......#
...#.##..
###..##..
.....#..#
##.##.###
######.#.
.....####

.##...#######
....##.#.##.#
.##...##.....
.##..#..####.
######..####.
.##..##..##..
.##.#..#....#
####..#..##..
....#...####.
....#....##..
#..#.##......

..##..#
.#.#..#
.#..##.
..##..#
..##..#
.#..##.
.#.#..#
..##..#
##.####
.#.#..#
#.#.##.
.##.##.
#..####
#.##...
#......

###.##....##.####
###..######..####
.....#.##.#......
.#.###.##.###.#..
..#.##....##.#...
###..#.##.#..####
###..#....#...###
.#.#........#.#..
.#..#.#..#.#..#..

.##.#.##.....
#.##.#.###...
#....##...#..
....##.#..###
#.#.#.#...###
.#..###...#..
##.....#...##
......#..#...
.##.#..###.##
#.###.#.#..##
#.#####...###
..#.#....##..
..#.#..#.##..
#.#####...###
#.###.#.#..##

...##.#######....
.....#..#..######
##..#..###....#..
##.#.#..##.###.##
..#.#.#..##.###..
..#..#..##.##.#..
.##..#..#..#.#.##
##...##..###.....
.......#.#.######
####.##.#...#..##
###.#.#.##..##.##

##.#.#.....
.#..###.#..
####.#..###
##.....#...
.#.#.#...##
##...#.####
..###...###
####..#....
####.##....
..###...###
##...#.####

###.#..#.##
..#......#.
...#.##.#..
##..#..#.##
####.##.###
..###..###.
##.#....#.#
###......##
...#.##.#..
####.##.###
###..##..##
##.##..##.#
...#....#..

#..###...####..
#.####...####..
##.###...####..
...#..#..#..#..
##...###..##..#
.##.##..#.##.#.
.#.#.#.###..###
#####.#.######.
.###.####....##
####...########
.#..#.###....##
#........#..#..
#..#.#.########

#...#..######.#
#.#...#....##..
#.#...#....##..
#...#..######.#
###.####.###...
.#.#..#..#..#..
.#.#.###...#..#
######..#..#.#.
.#.####..#....#
#.....#..#.#.##
.##...#.#.....#
##...###..#.##.
...#...##.#..#.
#.#.#..#.##.#..
#.#.#..#.##.#..
...#...##.#..#.
##..####..#.##.

#.#.##..#..
...###..###
.####.##.##
##..##..##.
##.########
.###.####.#
####......#
.#...#..#..
###...##...
##...#..#..
##.#.#..#.#
##.#.#..#.#
##...#..#..

..#.##.###.
..#.##.###.
#.######.##
.#..#..###.
.#.#.......
.#.#.......
.#..#..#.#.
#.######.##
..#.##.###.

###........######
..#.#....#.#....#
.#.##....##.#..#.
###.##..##.######
...##.##.##......
..##......###..##
.#.########.#..#.
.##..#..#..##..##
##..#....#..####.
.##.#.##.#.##..##
.###..##..###..##
##.#......#.####.
###........######
.#.########.#..#.
.##...##...##..##

#.#.#.#..#.###.
##....##.#.#...
#.#.###.#.....#
..##.##..###.##
..#############
..#######....##
..#....##.####.
..#....##.####.
..#######....##
..#############
..##..#..###.##
#.#.###.#.....#
##....##.#.#...
#.#.#.#..#.###.
#.#.#.#..#.###.

........###.###.#
........###.###.#
.#.##.#..##..#.#.
###..###.#.#.##.#
##..#.##.#####...
..#..#..#..###.##
...##....#.##..##
##....##.####....
#.#..#.##.#.##..#

....#.#.###.#..
.##........####
.##.##..#.##.##
####.#...#..#..
.......##.##.##
####..##.#..###
.##..###..##.##
...#.##.#....##
....####.#.#...
#..#######..#..
#..###....#.###
.....#..#.#.###
.##...#.###..##
.......#..##.##
#..#..##...####
.##.##.###.....
#..#.##.#.#....
"""




var map = inputTest.split(separator: "\n\n").map { String($0) }
map = input3.split(separator: "\n\n").map { String($0) }
map = input.split(separator: "\n\n").map { String($0) }

// Split by  the empty line
let groupds = map.map { $0.split(separator:"\n").map { String($0)} }

print("Map: \(groupds)")
print("Groups: \(groupds.count)")

var fullVertSimmetries = 0
var fullHorizontalSimmerties = 0

func log(_ msg: String) {
    print(msg)
}

func anotherSolution(for group: [[Character]]) -> (rows: [Int], columns: [Int]) {
    let original = solution(for: group)

    for g in group.enumerated() {
        // log("Searching for a different solution for \(g.offset) \(g.element)")

        for cc in g.element.enumerated() {
            // log("[] \(g.offset), \(cc.offset)")
            var newGroup = group
            // swap the char
            newGroup[g.offset][cc.offset] = cc.element == "#" ? "." : "#"

            guard newGroup != group else {
                print("WTD.. NOthing changed")
                continue
            }


            print("Trying to find a different solution for \(g.offset), \(cc.offset)")
            var logGroup = newGroup
            logGroup[g.offset][cc.offset] = cc.element == "#" ? "D" : "S"
            printGroup(logGroup.map { String($0) })

            let result = solution(for: newGroup)

            print("Found the result: \(result)")


            if (!result.rows.isEmpty || !result.columns.isEmpty) {
                // Remove original values from the result
                let rows = result.rows.filter { !original.rows.contains($0) }
                let columns = result.columns.filter { !original.columns.contains($0) }
                let updated = (rows, columns)

                if !rows.isEmpty || !columns.isEmpty {
                    print("Found a different solution for \(g.offset), \(cc.offset): \(updated)")
                    return (rows, columns)
                }
            }
        }
    }
    log("Failed to find a different solution. Original was \(original)")
    return original

}


func solution(for group: [[Character]]) -> (rows: [Int], columns: [Int]) {
    var rowsAbove: [Int] = []
    var columnsLeft: [Int] = []

    log("Group: \n\(group.map { String($0) }.joined(separator: "\n"))")

    for y in 0..<group.count-1 {

        var hasSymmetry = true
        
        for yy in 0...y where hasSymmetry && y + yy + 1 < group.count {
            let row2 = group[y + yy + 1]
            let row1 = group[y - yy]

            log(" [\(y)]Checkign \n\(row1) vs\n\(row2)")
            if row1 != row2 {
                print("No symmetry at \(y)")
                hasSymmetry = false
                break
            }
        }
        if hasSymmetry {
            print("Has symmetry at \(y)")
            rowsAbove.append(y + 1)
        }
    }

    let width = group[0].count
    for x in 0..<width - 1 {
        var hasSymmetry = true

        for xx in 0...x where hasSymmetry && x + xx + 1 < width {
               for str in group {
                   if str[x - xx] != str[x + xx + 1] {
                    hasSymmetry = false
                    break
                }
            }            
        }

        if hasSymmetry {
            columnsLeft.append(x + 1)
        }
    }

    // print("Columns left: \(columnsLeft)")
    print("Rows and colums: \(rowsAbove) \(columnsLeft)")

    return (rowsAbove, columnsLeft)
}

var total = 0
for group in groupds {

    let result = anotherSolution(for: group.map { Array($0) })
// let result = solution(for: group.map { Array($0) })

    total += result.rows.reduce(0, +) * 100 + result.columns.reduce(0, +)

}


print("Total: \(total)")


func printGroup(_ group: [String]) {
    var res = ""
    for line in group {
        res += line + "\n"
    }
    print(res)
}

var sum = 0
print("Sum: \(sum)")


// MARK: - Private ======================================================================================

enum Direction {
    case up
    case down
    case left
    case right
}


struct Coord: Hashable, Equatable, CustomStringConvertible {
    var x: Int
    var y: Int
    init(x: Int, y: Int) {
        self.x = x
        self.y = y
    }

    func top() -> Coord {
        return Coord(x: x, y: y - 1)
    }
    func bottom() -> Coord {
        return Coord(x: x, y: y + 1)
    }
    func left() -> Coord {
        return Coord(x: x - 1, y: y)
    }
    func right() -> Coord {
        return Coord(x: x + 1, y: y)
    }

    mutating func move(_ direction: Direction) {
        switch direction {
            case .up:
                y -= 1
            case .down:
                y += 1
            case .left:
                x -= 1
            case .right:
                x += 1
        }
    }

    var description: String {
        return "(\(x), \(y))"
    }
}

extension String {
    func components(withMaxLength length: Int) -> [String] {
        return stride(from: 0, to: self.count, by: length).map {
            let start = self.index(self.startIndex, offsetBy: $0)
            let end = self.index(start, offsetBy: length, limitedBy: self.endIndex) ?? self.endIndex
            return String(self[start..<end])
        }
    }
}